// <auto-generated />
using System;
using ChatKid.DataLayer.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChatKid.DataLayer.Migrations
{
    [DbContext(typeof(KidtalkieContext))]
    partial class KidtalkieContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("application_user_id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("time with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Gmail")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gmail");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Admin_pkey");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex(new[] { "Gmail" }, "Admin_gmail_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "Admin_phone_key")
                        .IsUnique();

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Advertising", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<short?>("Clicks")
                        .HasColumnType("smallint")
                        .HasColumnName("clicks");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<string>("DestinationUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("destination_url");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("time with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("ImageVideoUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("image_video_url");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("time with time zone")
                        .HasColumnName("start_date");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("Advertising_pkey");

                    b.ToTable("Advertising", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("image_url");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("title");

                    b.Property<Guid?>("TypeBlogId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_blog_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("VoiceUrl")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("voice_url");

                    b.HasKey("Id")
                        .HasName("Blog_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TypeBlogId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Channel_pkey");

                    b.ToTable("Channel", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.ChannelUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Channel_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("NameInChannel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_in_channel");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("User_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id")
                        .HasName("Channel_User_pkey");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("Channel_User", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.DiscussRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("ExpertId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("expert_id");

                    b.Property<Guid?>("KidServiceId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("kid_service_id");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("DiscussRoom_pkey");

                    b.HasIndex("ExpertId");

                    b.HasIndex("KidServiceId");

                    b.ToTable("DiscussRoom", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Expert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("application_user_id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("time with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Gmail")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gmail");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Expert_pkey");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex(new[] { "Gmail" }, "Expert_gmail_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "Expert_phone_key")
                        .IsUnique();

                    b.ToTable("Expert", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("application_user_id");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<string>("OwnerMail")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("owner_mail");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Family_pkey");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Family", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.KidService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChildrenId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("children_id");

                    b.Property<Guid?>("ServiceId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("service_id");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("KidService_pkey");

                    b.HasIndex("ChildrenId");

                    b.HasIndex("ServiceId");

                    b.ToTable("KidService", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ChannelUserId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("channel_user_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("image_url");

                    b.Property<DateTime?>("SentTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("sent_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<string>("VoiceUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("voice_url");

                    b.HasKey("Id")
                        .HasName("Message_pkey");

                    b.HasIndex("ChannelUserId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.MoneyPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uuid")
                        .HasColumnName("discount_id");

                    b.Property<Guid?>("MethodId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("method_id");

                    b.Property<Guid?>("ParentSubcriptionId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("parent_subcription_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("MoneyPayment_pkey");

                    b.HasIndex("MethodId");

                    b.HasIndex("ParentSubcriptionId");

                    b.ToTable("MoneyPayment", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("message");

                    b.Property<string>("Receiver")
                        .HasColumnType("text")
                        .HasColumnName("receiver");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("Notification_pkey");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Otp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("OTP")
                        .HasColumnType("integer")
                        .HasColumnName("otp");

                    b.HasKey("Id")
                        .HasName("Otp_pkey");

                    b.ToTable("Otp");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.ParentSubcription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("ParentId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<Guid?>("SubcriptionId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("subcription_id");

                    b.HasKey("Id")
                        .HasName("ParentSubcription_pkey");

                    b.HasIndex("ParentId");

                    b.HasIndex("SubcriptionId");

                    b.ToTable("ParentSubcription", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PaymentMethod_pkey");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Qa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("DiscussRoomId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("discuss_room_id");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsChildren")
                        .HasColumnType("boolean")
                        .HasColumnName("is_children");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<string>("VoiceUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("voice_url");

                    b.HasKey("Id")
                        .HasName("QA_pkey");

                    b.HasIndex("DiscussRoomId");

                    b.ToTable("QA", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Question", b =>
                {
                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsChildren")
                        .HasColumnType("boolean")
                        .HasColumnName("is_children");

                    b.Property<Guid?>("KidServiceId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("kid_service_id");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<string>("VoiceUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("voice_url");

                    b.HasIndex("KidServiceId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<short?>("Energy")
                        .HasColumnType("smallint")
                        .HasColumnName("energy");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Service_pkey");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Subcription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<decimal?>("ActualPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("actual_price");

                    b.Property<short?>("Energy")
                        .HasColumnType("smallint")
                        .HasColumnName("energy");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("Subcription_pkey");

                    b.ToTable("Subcription", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<short?>("Energy")
                        .HasColumnType("smallint")
                        .HasColumnName("energy");

                    b.Property<Guid?>("KidServiceId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("kid_service_id");

                    b.Property<Guid?>("MoneyPaymentId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("money_payment_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("WalletId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("Transaction_pkey");

                    b.HasIndex("KidServiceId");

                    b.HasIndex("MoneyPaymentId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.TypeBlog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("Type_Blog_pkey");

                    b.ToTable("TypeBlog", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("avatar_url");

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("device_token");

                    b.Property<Guid?>("FamilyId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("family_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("role");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("User_pkey");

                    b.HasIndex("FamilyId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<short?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("status");

                    b.Property<short?>("TotalEnergy")
                        .HasColumnType("smallint")
                        .HasColumnName("total_energy");

                    b.Property<DateTime?>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time with time zone")
                        .HasColumnName("updated_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Wallet_pkey");

                    b.HasIndex("OwnerId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Admin", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Identity.ApplicationUser", null)
                        .WithOne("Admin")
                        .HasForeignKey("ChatKid.DataLayer.Entities.Admin", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Blog", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.Admin", "CreateAdmin")
                        .WithMany("CreatedBlogs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Blog_Create_Admin_id_fkey");

                    b.HasOne("ChatKid.DataLayer.Entities.TypeBlog", "TypeBlog")
                        .WithMany("Blogs")
                        .HasForeignKey("TypeBlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Blog_Type_Blog_id_fkey");

                    b.HasOne("ChatKid.DataLayer.Entities.Admin", "UpdateAdmin")
                        .WithMany("UpdatedBlogs")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Blog_Update_Admin_id_fkey");

                    b.Navigation("CreateAdmin");

                    b.Navigation("TypeBlog");

                    b.Navigation("UpdateAdmin");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.ChannelUser", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.Channel", "Channel")
                        .WithMany("ChannelUsers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Channel_User_Channel_id_fkey");

                    b.HasOne("ChatKid.DataLayer.Entities.User", "User")
                        .WithMany("ChannelUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Channel_User_User_id_fkey");

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.DiscussRoom", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.Expert", "Expert")
                        .WithMany("DiscussRooms")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("DiscussRoom_expert_id_fkey");

                    b.HasOne("ChatKid.DataLayer.Entities.KidService", "KidService")
                        .WithMany("DiscussRooms")
                        .HasForeignKey("KidServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("DiscussRoom_kid_service_id_fkey");

                    b.Navigation("Expert");

                    b.Navigation("KidService");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Expert", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Identity.ApplicationUser", null)
                        .WithOne("Expert")
                        .HasForeignKey("ChatKid.DataLayer.Entities.Expert", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Family", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Identity.ApplicationUser", null)
                        .WithOne("Family")
                        .HasForeignKey("ChatKid.DataLayer.Entities.Family", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.KidService", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.User", "Children")
                        .WithMany("KidServices")
                        .HasForeignKey("ChildrenId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("KidService_children_id_fkey");

                    b.HasOne("ChatKid.DataLayer.Entities.Service", "Service")
                        .WithMany("KidServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("KidService_service_id_fkey");

                    b.Navigation("Children");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Message", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.ChannelUser", "ChannelUser")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("Message_channel_user_id_fkey");

                    b.Navigation("ChannelUser");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.MoneyPayment", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.PaymentMethod", "Method")
                        .WithMany("MoneyPayments")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("MoneyPayment_method_id_fkey");

                    b.HasOne("ChatKid.DataLayer.Entities.ParentSubcription", "ParentSubcription")
                        .WithMany("MoneyPayments")
                        .HasForeignKey("ParentSubcriptionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("MoneyPayment_parent_subcription_id_fkey");

                    b.Navigation("Method");

                    b.Navigation("ParentSubcription");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Notification", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.Admin", "CreateAdmin")
                        .WithMany("Notifications")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Notification_admin_id_fkey");

                    b.Navigation("CreateAdmin");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.ParentSubcription", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.User", "Parent")
                        .WithMany("ParentSubcriptions")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("ParentSubcription_parent_id_fkey");

                    b.HasOne("ChatKid.DataLayer.Entities.Subcription", "Subcription")
                        .WithMany("ParentSubcriptions")
                        .HasForeignKey("SubcriptionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("ParentSubcription_subcription_id_fkey");

                    b.Navigation("Parent");

                    b.Navigation("Subcription");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Qa", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.DiscussRoom", "DiscussRoom")
                        .WithMany("Qas")
                        .HasForeignKey("DiscussRoomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("QA_discuss_room_id_fkey");

                    b.Navigation("DiscussRoom");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Question", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.KidService", "KidService")
                        .WithMany()
                        .HasForeignKey("KidServiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("Question_kid_service_id_fkey");

                    b.Navigation("KidService");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Transaction", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.KidService", "KidService")
                        .WithMany("Transactions")
                        .HasForeignKey("KidServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Transaction_kid_service_id_fkey");

                    b.HasOne("ChatKid.DataLayer.Entities.MoneyPayment", "MoneyPayment")
                        .WithMany("Transactions")
                        .HasForeignKey("MoneyPaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("Transaction_money_payment_id_fkey");

                    b.HasOne("ChatKid.DataLayer.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("Transaction_wallet_id_fkey");

                    b.Navigation("KidService");

                    b.Navigation("MoneyPayment");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.User", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.Family", "Family")
                        .WithMany("Users")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("User_family_id_fkey");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Wallet", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Entities.User", "Owner")
                        .WithMany("Wallets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("Wallet_owner_id_fkey");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatKid.DataLayer.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ChatKid.DataLayer.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Admin", b =>
                {
                    b.Navigation("CreatedBlogs");

                    b.Navigation("Notifications");

                    b.Navigation("UpdatedBlogs");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Channel", b =>
                {
                    b.Navigation("ChannelUsers");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.ChannelUser", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.DiscussRoom", b =>
                {
                    b.Navigation("Qas");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Expert", b =>
                {
                    b.Navigation("DiscussRooms");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Family", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.KidService", b =>
                {
                    b.Navigation("DiscussRooms");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.MoneyPayment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.ParentSubcription", b =>
                {
                    b.Navigation("MoneyPayments");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.PaymentMethod", b =>
                {
                    b.Navigation("MoneyPayments");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Service", b =>
                {
                    b.Navigation("KidServices");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Subcription", b =>
                {
                    b.Navigation("ParentSubcriptions");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.TypeBlog", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.User", b =>
                {
                    b.Navigation("ChannelUsers");

                    b.Navigation("KidServices");

                    b.Navigation("ParentSubcriptions");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ChatKid.DataLayer.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Expert");

                    b.Navigation("Family");
                });
#pragma warning restore 612, 618
        }
    }
}
